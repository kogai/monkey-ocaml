(x: {a:nat, b:bool}) -> x;
((x: {a:nat, b:bool}) -> x) {a:100, b:true};
((x: {a:nat, b:bool}) -> x) {a:true, b:100};

(x: (nat, bool)) -> x;
((x: (nat, bool)) -> x) (100, true);
((x: (nat, bool)) -> x) (true, 100);
((x: (nat, bool)) -> x) (true, 100, ());

(*
今後実装したい
let id (x:nat) = x
let curried (x:nat -> nat) (y:nat) = x y
*)

((f: nat -> unit) -> f) ((x: nat) -> ());
((f: nat -> unit) -> f) ((x: nat) -> x);

((x: nat) -> x) 100;
((f: nat -> bool) -> (x: nat) -> f x) ((x: nat) -> true) 99;
((f: nat -> bool) -> (x: nat) -> f x) ((x: nat) -> true) true;

(x: bool -> bool) -> if x then true else false;
(x: bool -> bool) -> if x true then x else false;
((x: bool) -> x) ((x: bool) -> x);

(x: bool) -> x;
((x: bool) -> x) true;
(x: bool -> bool) -> if x true then x else x;
(x: bool) -> if x then true else false;
(x: bool) -> (y: bool) -> if x then x else y;
